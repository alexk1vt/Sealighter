// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: string_example.proto

#include "string_example.pb.h"
#include "string_example.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace stringexample {

static const char* Sender_method_names[] = {
  "/stringexample.Sender/SendString",
};

std::unique_ptr< Sender::Stub> Sender::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Sender::Stub> stub(new Sender::Stub(channel, options));
  return stub;
}

Sender::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendString_(Sender_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Sender::Stub::SendString(::grpc::ClientContext* context, const ::stringexample::EventString& request, ::stringexample::SendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stringexample::EventString, ::stringexample::SendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendString_, context, request, response);
}

void Sender::Stub::async::SendString(::grpc::ClientContext* context, const ::stringexample::EventString* request, ::stringexample::SendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stringexample::EventString, ::stringexample::SendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendString_, context, request, response, std::move(f));
}

void Sender::Stub::async::SendString(::grpc::ClientContext* context, const ::stringexample::EventString* request, ::stringexample::SendResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stringexample::SendResponse>* Sender::Stub::PrepareAsyncSendStringRaw(::grpc::ClientContext* context, const ::stringexample::EventString& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stringexample::SendResponse, ::stringexample::EventString, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stringexample::SendResponse>* Sender::Stub::AsyncSendStringRaw(::grpc::ClientContext* context, const ::stringexample::EventString& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

Sender::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sender_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sender::Service, ::stringexample::EventString, ::stringexample::SendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sender::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stringexample::EventString* req,
             ::stringexample::SendResponse* resp) {
               return service->SendString(ctx, req, resp);
             }, this)));
}

Sender::Service::~Service() {
}

::grpc::Status Sender::Service::SendString(::grpc::ServerContext* context, const ::stringexample::EventString* request, ::stringexample::SendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace stringexample

